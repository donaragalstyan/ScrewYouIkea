{
  "id": "tufjord",
  "name": "TUFJORD Upholstered Bed Frame",
  "description": "3D animated assembly guide generated for the IKEA TUFJORD bed frame.",
  "thumbnail": "/tufjord/page_1.jpg",
  "steps": [
    {
      "index": 0,
      "title": "Organize workplace",
      "instructions": [
        "Lay out all TUFJORD components, hardware, and tools."
      ],
      "image": "/tufjord/page_1.jpg",
      "parts": [
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        },
        {
          "id": "T3",
          "name": "Open wrench",
          "type": "tool",
          "image": "/tufjord/parts/part-T3.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 0;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 1,
      "title": "Attach left side rail",
      "instructions": [
        "Slide the left side rail into the headboard bracket."
      ],
      "image": "/tufjord/page_2.jpg",
      "parts": [
        {
          "id": "A",
          "name": "Left side rail",
          "type": "frame",
          "image": "/tufjord/parts/part-A.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 1;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 2,
      "title": "Attach right side rail",
      "instructions": [
        "Mirror the alignment on the right side rail."
      ],
      "image": "/tufjord/page_3.jpg",
      "parts": [
        {
          "id": "B",
          "name": "Right side rail",
          "type": "frame",
          "image": "/tufjord/parts/part-B.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 2;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 3,
      "title": "Install headboard frame beam",
      "instructions": [
        "Lock the lower headboard beam between the rails."
      ],
      "image": "/tufjord/page_4.jpg",
      "parts": [
        {
          "id": "C",
          "name": "Headboard frame",
          "type": "frame",
          "image": "/tufjord/parts/part-C.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 3;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 4,
      "title": "Mount headboard cushion",
      "instructions": [
        "Position the upholstered panel onto the headboard frame."
      ],
      "image": "/tufjord/page_5.jpg",
      "parts": [
        {
          "id": "D",
          "name": "Headboard cushion",
          "type": "upholstery",
          "image": "/tufjord/parts/part-D.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 4;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 5,
      "title": "Fix footboard frame",
      "instructions": [
        "Secure the footboard beam between side rails."
      ],
      "image": "/tufjord/page_6.jpg",
      "parts": [
        {
          "id": "E",
          "name": "Footboard frame",
          "type": "frame",
          "image": "/tufjord/parts/part-E.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 5;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 6,
      "title": "Mount footboard cushion",
      "instructions": [
        "Align the footboard cushion over the frame and fasten."
      ],
      "image": "/tufjord/page_7.jpg",
      "parts": [
        {
          "id": "F",
          "name": "Footboard cushion",
          "type": "upholstery",
          "image": "/tufjord/parts/part-F.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 6;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 7,
      "title": "Add center beam",
      "instructions": [
        "Drop the centre support beam onto the brackets."
      ],
      "image": "/tufjord/page_8.jpg",
      "parts": [
        {
          "id": "G",
          "name": "Center support beam",
          "type": "support",
          "image": "/tufjord/parts/part-G.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 7;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 8,
      "title": "Secure front support leg",
      "instructions": [
        "Fasten the front support leg to the center beam."
      ],
      "image": "/tufjord/page_9.jpg",
      "parts": [
        {
          "id": "H",
          "name": "Front support leg",
          "type": "support",
          "image": "/tufjord/parts/part-H.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 8;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 9,
      "title": "Secure rear support leg",
      "instructions": [
        "Repeat for the rear center support leg."
      ],
      "image": "/tufjord/page_10.jpg",
      "parts": [
        {
          "id": "I",
          "name": "Rear support leg",
          "type": "support",
          "image": "/tufjord/parts/part-I.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 9;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 10,
      "title": "Install left cross brace",
      "instructions": [
        "Lock the left cross brace between rail and beam."
      ],
      "image": "/tufjord/page_11.jpg",
      "parts": [
        {
          "id": "J",
          "name": "Left cross brace",
          "type": "support",
          "image": "/tufjord/parts/part-J.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 10;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 11,
      "title": "Install right cross brace",
      "instructions": [
        "Add the right cross brace to stabilize the frame."
      ],
      "image": "/tufjord/page_12.jpg",
      "parts": [
        {
          "id": "K",
          "name": "Right cross brace",
          "type": "support",
          "image": "/tufjord/parts/part-K.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        },
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 11;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 12,
      "title": "Lay first slat stack",
      "instructions": [
        "Fan out the first slat section starting at the headboard."
      ],
      "image": "/tufjord/page_13.jpg",
      "parts": [
        {
          "id": "S1",
          "name": "Slat stack 1",
          "type": "slats",
          "image": "/tufjord/parts/part-S1.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 12;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 13,
      "title": "Lay second slat stack",
      "instructions": [
        "Continue with the next slat group and align gaps evenly."
      ],
      "image": "/tufjord/page_14.jpg",
      "parts": [
        {
          "id": "S2",
          "name": "Slat stack 2",
          "type": "slats",
          "image": "/tufjord/parts/part-S2.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 13;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 14,
      "title": "Lay third slat stack",
      "instructions": [
        "Position the third slat stack into the frame."
      ],
      "image": "/tufjord/page_15.jpg",
      "parts": [
        {
          "id": "S3",
          "name": "Slat stack 3",
          "type": "slats",
          "image": "/tufjord/parts/part-S3.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 14;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 15,
      "title": "Lay fourth slat stack",
      "instructions": [
        "Add the fourth slat stack and ensure contact with side rails."
      ],
      "image": "/tufjord/page_16.jpg",
      "parts": [
        {
          "id": "S4",
          "name": "Slat stack 4",
          "type": "slats",
          "image": "/tufjord/parts/part-S4.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 15;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 16,
      "title": "Lay fifth slat stack",
      "instructions": [
        "Install the fifth slat stack towards the centre."
      ],
      "image": "/tufjord/page_17.jpg",
      "parts": [
        {
          "id": "S5",
          "name": "Slat stack 5",
          "type": "slats",
          "image": "/tufjord/parts/part-S5.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 16;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 17,
      "title": "Lay sixth slat stack",
      "instructions": [
        "Place the sixth slat stack with uniform spacing."
      ],
      "image": "/tufjord/page_18.jpg",
      "parts": [
        {
          "id": "S6",
          "name": "Slat stack 6",
          "type": "slats",
          "image": "/tufjord/parts/part-S6.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 17;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 18,
      "title": "Lay seventh slat stack",
      "instructions": [
        "Drop the seventh slat assembly near the footboard."
      ],
      "image": "/tufjord/page_19.jpg",
      "parts": [
        {
          "id": "S7",
          "name": "Slat stack 7",
          "type": "slats",
          "image": "/tufjord/parts/part-S7.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 18;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 19,
      "title": "Lay final slat stack",
      "instructions": [
        "Finish with the final slat group and align the run."
      ],
      "image": "/tufjord/page_20.jpg",
      "parts": [
        {
          "id": "S8",
          "name": "Slat stack 8",
          "type": "slats",
          "image": "/tufjord/parts/part-S8.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 19;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 20,
      "title": "Fit headboard top rail",
      "instructions": [
        "Cap the headboard with the finishing rail."
      ],
      "image": "/tufjord/page_21.jpg",
      "parts": [
        {
          "id": "M1",
          "name": "Finishing caps - headboard",
          "type": "finishing",
          "image": "/tufjord/parts/part-M1.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 20;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 21,
      "title": "Fit footboard top rail",
      "instructions": [
        "Cap the footboard with the finishing rail."
      ],
      "image": "/tufjord/page_22.jpg",
      "parts": [
        {
          "id": "M2",
          "name": "Finishing caps - footboard",
          "type": "finishing",
          "image": "/tufjord/parts/part-M2.jpg",
          "quantity": 1
        },
        {
          "id": "T2",
          "name": "Torx key",
          "type": "tool",
          "image": "/tufjord/parts/part-T2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 21;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 22,
      "title": "Install left side cover",
      "instructions": [
        "Snap the left side cover over the rail."
      ],
      "image": "/tufjord/page_23.jpg",
      "parts": [
        {
          "id": "M3",
          "name": "Side cover trims",
          "type": "finishing",
          "image": "/tufjord/parts/part-M3.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 22;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 23,
      "title": "Install right side cover",
      "instructions": [
        "Repeat with the right side cover trim."
      ],
      "image": "/tufjord/page_24.jpg",
      "parts": [
        {
          "id": "M3",
          "name": "Side cover trims",
          "type": "finishing",
          "image": "/tufjord/parts/part-M3.jpg",
          "quantity": 1
        },
        {
          "id": "Q1",
          "name": "Hardware pack A",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q1.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 23;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 24,
      "title": "Fit finishing caps",
      "instructions": [
        "Press finishing caps onto exposed bolts."
      ],
      "image": "/tufjord/page_25.jpg",
      "parts": [
        {
          "id": "M1",
          "name": "Finishing caps - headboard",
          "type": "finishing",
          "image": "/tufjord/parts/part-M1.jpg",
          "quantity": 1
        },
        {
          "id": "M2",
          "name": "Finishing caps - footboard",
          "type": "finishing",
          "image": "/tufjord/parts/part-M2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 24;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 25,
      "title": "Drop mattress support",
      "instructions": [
        "Lower the fabric base panel over the slats."
      ],
      "image": "/tufjord/page_26.jpg",
      "parts": [
        {
          "id": "S8",
          "name": "Slat stack 8",
          "type": "slats",
          "image": "/tufjord/parts/part-S8.jpg",
          "quantity": 1
        },
        {
          "id": "Q2",
          "name": "Hardware pack B",
          "type": "hardware",
          "image": "/tufjord/parts/part-Q2.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 25;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 26,
      "title": "Arrange pillows",
      "instructions": [
        "Place decorative pillows and upholstery elements."
      ],
      "image": "/tufjord/page_27.jpg",
      "parts": [
        {
          "id": "D",
          "name": "Headboard cushion",
          "type": "upholstery",
          "image": "/tufjord/parts/part-D.jpg",
          "quantity": 1
        },
        {
          "id": "F",
          "name": "Footboard cushion",
          "type": "upholstery",
          "image": "/tufjord/parts/part-F.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 26;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    },
    {
      "index": 27,
      "title": "Final inspection",
      "instructions": [
        "Check alignment, tighten hardware, and admire the result."
      ],
      "image": "/tufjord/page_28.jpg",
      "parts": [
        {
          "id": "T1",
          "name": "Allen key",
          "type": "tool",
          "image": "/tufjord/parts/part-T1.jpg",
          "quantity": 1
        },
        {
          "id": "T3",
          "name": "Open wrench",
          "type": "tool",
          "image": "/tufjord/parts/part-T3.jpg",
          "quantity": 1
        }
      ],
      "threeCode": "const bounds = container.getBoundingClientRect();\nconst width = bounds.width || container.clientWidth || 640;\nconst height = bounds.height || container.clientHeight || 480;\ncontainer.style.position = 'relative';\ncontainer.style.background = '#ffffff';\ncontainer.style.touchAction = 'none';\n\nconst renderer = new THREE.WebGLRenderer({ antialias: true, alpha: false });\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\nrenderer.setSize(width, height, false);\nrenderer.setClearColor(0xf5f7fa, 1);\ncontainer.appendChild(renderer.domElement);\nrenderer.domElement.style.touchAction = 'none';\nrenderer.domElement.style.pointerEvents = 'auto';\n\nconst aspect = width / height;\nconst viewSize = 50;\nconst focusPoint = new THREE.Vector3(2.5, 1.6, -2.5);\nconst camera = new THREE.OrthographicCamera(\n  (-viewSize * aspect) / 2,\n  (viewSize * aspect) / 2,\n  viewSize / 2,\n  -viewSize / 2,\n  0.1,\n  100\n);\nconst orbitRadius = 36;\nconst cosPitch = Math.cos(0.68);\nconst sinPitch = Math.sin(0.68);\nconst cosYaw = Math.cos(1.4);\nconst sinYaw = Math.sin(1.4);\ncamera.position.set(\n  focusPoint.x + orbitRadius * cosPitch * cosYaw,\n  focusPoint.y + orbitRadius * sinPitch,\n  focusPoint.z + orbitRadius * cosPitch * sinYaw\n);\ncamera.lookAt(focusPoint);\ncamera.zoom = 2.1;\ncamera.updateProjectionMatrix();\n\nconst scene = new THREE.Scene();\nconst root = new THREE.Group();\nroot.position.set(-6, 3.2, 6);\nscene.add(root);\n\nconst ambient = new THREE.AmbientLight(0xf8fbff, 0.95);\nconst keyLight = new THREE.DirectionalLight(0xffffff, 0.65);\nkeyLight.position.set(6, 10, 4);\nconst fillLight = new THREE.DirectionalLight(0xffffff, 0.35);\nfillLight.position.set(-6, 6, -4);\nscene.add(ambient);\nscene.add(keyLight);\nscene.add(fillLight);\n\nconst grid = new THREE.GridHelper(12, 12, 0xd7dde5, 0xe5ecf5);\nroot.add(grid);\n\nconst background = new THREE.Mesh(\n  new THREE.PlaneGeometry(30, 18),\n  new THREE.MeshBasicMaterial({ color: 0xffffff })\n);\nbackground.position.set(0, 0, -6);\nbackground.rotation.x = -Math.PI / 2;\nbackground.receiveShadow = false;\nbackground.visible = false;\nroot.add(background);\n\nconst pointerState = { isDown: false, lastX: 0, lastY: 0, targetX: 0.68, targetY: 1.4 };\nconst orbitState = { radius: orbitRadius };\nconst zoomState = { value: camera.zoom, min: 0.8999999999999999, max: 6 };\n\nfunction onPointerDown(event) {\n  pointerState.isDown = true;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n}\n\nfunction onPointerMove(event) {\n  if (!pointerState.isDown) return;\n  const deltaX = (event.clientX - pointerState.lastX) * 0.004;\n  const deltaY = (event.clientY - pointerState.lastY) * 0.004;\n  pointerState.lastX = event.clientX;\n  pointerState.lastY = event.clientY;\n  pointerState.targetX = Math.max(-Math.PI / 2 + 0.1, Math.min(Math.PI / 2 - 0.1, pointerState.targetX + deltaY));\n  pointerState.targetY += deltaX;\n}\n\nfunction onPointerUp() {\n  pointerState.isDown = false;\n}\n\nfunction onWheel(event) {\n  event.preventDefault();\n  const zoomFactor = Math.exp(event.deltaY * 0.0015);\n  const nextZoom = zoomState.value / zoomFactor;\n  zoomState.value = Math.max(zoomState.min, Math.min(zoomState.max, nextZoom));\n  camera.zoom = zoomState.value;\n  camera.updateProjectionMatrix();\n}\n\ncontainer.addEventListener('pointerdown', onPointerDown);\ncontainer.addEventListener('pointermove', onPointerMove);\nwindow.addEventListener('pointerup', onPointerUp);\ncontainer.addEventListener('wheel', onWheel, { passive: false });\nrenderer.domElement.addEventListener('wheel', onWheel, { passive: false });\n\nconst componentBlueprints = [{\"key\":\"floor\",\"step\":0,\"color\":15132390,\"highlight\":16764006,\"geometry\":{\"type\":\"box\",\"args\":[10,0.05,6]},\"start\":[0,-0.05,0],\"target\":[0,-0.05,0],\"rotation\":[0,0,0]},{\"key\":\"leftRail\",\"step\":1,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[-6,0.2,-1.3],\"target\":[-1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"rightRail\",\"step\":2,\"color\":3228500,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.4,2.6]},\"start\":[6,0.2,-1.3],\"target\":[1.9,0.4,-1.3],\"rotation\":[0,0,0]},{\"key\":\"headboardFrame\",\"step\":3,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,-3.5],\"target\":[0,0.9,-1.7],\"rotation\":[0,0,0]},{\"key\":\"headboardPanel\",\"step\":4,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1.4,0.15]},\"start\":[0,1.5,-4.5],\"target\":[0,1.4,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardFrame\",\"step\":5,\"color\":2832967,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.35,0.2]},\"start\":[0,0.35,3.5],\"target\":[0,0.7,1.7],\"rotation\":[0,0,0]},{\"key\":\"footboardPanel\",\"step\":6,\"color\":4017504,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,1,0.15]},\"start\":[0,1.2,4.5],\"target\":[0,1.1,1.6],\"rotation\":[0,0,0]},{\"key\":\"centerBeam\",\"step\":7,\"color\":5201775,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.35,2.6]},\"start\":[0,0.2,4],\"target\":[0,0.6,-1.3],\"rotation\":[0,0,0]},{\"key\":\"supportLegFront\",\"step\":8,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[-4,-0.2,-0.5],\"target\":[-1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"supportLegRear\",\"step\":9,\"color\":3951191,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.35,1.2,0.35]},\"start\":[4,-0.2,-0.5],\"target\":[1.9,0.6,-0.5],\"rotation\":[0,0,0]},{\"key\":\"crossBraceLeft\",\"step\":10,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[-6,1.1,-1],\"target\":[-0.95,1,-1],\"rotation\":[0,0.2617993877991494,0]},{\"key\":\"crossBraceRight\",\"step\":11,\"color\":5268083,\"highlight\":16762220,\"geometry\":{\"type\":\"box\",\"args\":[0.2,0.3,2]},\"start\":[6,1.1,-1],\"target\":[0.95,1,-1],\"rotation\":[0,-0.2617993877991494,0]},{\"key\":\"slat01\",\"step\":12,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.5],\"rotation\":[0,0,0]},{\"key\":\"slat02\",\"step\":13,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-1.2],\"rotation\":[0,0,0]},{\"key\":\"slat03\",\"step\":14,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.9],\"rotation\":[0,0,0]},{\"key\":\"slat04\",\"step\":15,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.6],\"rotation\":[0,0,0]},{\"key\":\"slat05\",\"step\":16,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,-0.3],\"rotation\":[0,0,0]},{\"key\":\"slat06\",\"step\":17,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0],\"rotation\":[0,0,0]},{\"key\":\"slat07\",\"step\":18,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.3],\"rotation\":[0,0,0]},{\"key\":\"slat08\",\"step\":19,\"color\":16179381,\"highlight\":16757575,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.12,0.25]},\"start\":[0,1.5,-4],\"target\":[0,1,0.6],\"rotation\":[0,0,0]},{\"key\":\"headboardTopRail\",\"step\":20,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[-4,2.5,-2.5],\"target\":[0,2.1,-1.6],\"rotation\":[0,0,0]},{\"key\":\"footboardTopRail\",\"step\":21,\"color\":3228500,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[3.8,0.15,0.2]},\"start\":[4,2.5,2.5],\"target\":[0,1.7,1.6],\"rotation\":[0,0,0]},{\"key\":\"sideCapLeft\",\"step\":22,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[-6,0.8,1.2],\"target\":[-1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"sideCapRight\",\"step\":23,\"color\":2634816,\"highlight\":16767334,\"geometry\":{\"type\":\"box\",\"args\":[0.25,0.8,2.6]},\"start\":[6,0.8,1.2],\"target\":[1.95,0.8,1.2],\"rotation\":[0,0,0]},{\"key\":\"finishingCaps\",\"step\":24,\"color\":16762220,\"highlight\":16773283,\"geometry\":{\"type\":\"sphere\",\"args\":[0.12,12,12]},\"start\":[0,4,0],\"target\":[0,1.9,0],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-1.8,1.9,-1.4]},{\"offset\":[1.8,1.9,-1.4]},{\"offset\":[-1.8,1.9,1.4]},{\"offset\":[1.8,1.9,1.4]}]},{\"key\":\"mattressSupport\",\"step\":25,\"color\":16249579,\"highlight\":16770493,\"geometry\":{\"type\":\"box\",\"args\":[3.6,0.3,2.4]},\"start\":[0,3.5,0],\"target\":[0,1.35,-0.3],\"rotation\":[0,0,0]},{\"key\":\"decorPillows\",\"step\":26,\"color\":13621475,\"highlight\":16775126,\"geometry\":{\"type\":\"box\",\"args\":[1.2,0.4,0.6]},\"start\":[0,3,-3],\"target\":[-0.6,1.6,-1.4],\"rotation\":[0,0,0],\"duplicates\":[{\"offset\":[-0.6,1.6,-1.4]},{\"offset\":[0.6,1.6,-1.4]}]},{\"key\":\"finalGlow\",\"step\":27,\"color\":16777164,\"highlight\":16777164,\"geometry\":{\"type\":\"ring\",\"args\":[2.8,3.5,64]},\"start\":[0,1.2,0],\"target\":[0,1.2,0],\"rotation\":[1.5707963267948966,0,0]}];\nconst stepIndex = 27;\n\nconst materialCache = new Map();\nfunction getMaterial(color, highlight) {\n  const key = String(color) + '-' + String(highlight);\n  if (!materialCache.has(key)) {\n    const base = new THREE.MeshStandardMaterial({ color, metalness: 0.1, roughness: 0.6 });\n    base.userData.highlight = highlight;\n    materialCache.set(key, base);\n  }\n  return materialCache.get(key);\n}\n\nfunction createGeometry(def) {\n  switch (def.type) {\n    case 'box':\n      return new THREE.BoxGeometry(...def.args);\n    case 'cylinder':\n      return new THREE.CylinderGeometry(...def.args);\n    case 'sphere':\n      return new THREE.SphereGeometry(...def.args);\n    case 'ring':\n      return new THREE.RingGeometry(...def.args);\n    default:\n      return new THREE.BoxGeometry(1, 1, 1);\n  }\n}\n\nfunction createComponent(def) {\n  const geometry = createGeometry(def.geometry);\n  const material = getMaterial(def.color, def.highlight || def.color);\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.castShadow = false;\n  mesh.receiveShadow = true;\n\n  const edges = new THREE.LineSegments(\n    new THREE.EdgesGeometry(geometry, 45),\n    new THREE.LineBasicMaterial({ color: 0x0f172a, opacity: 0.4, transparent: true })\n  );\n  mesh.add(edges);\n\n  if (def.duplicates && Array.isArray(def.duplicates)) {\n    const group = new THREE.Group();\n    def.duplicates.forEach((dup) => {\n      const child = mesh.clone();\n      child.position.set(...dup.offset);\n      group.add(child);\n    });\n    return group;\n  }\n\n  return mesh;\n}\n\nconst components = componentBlueprints.map((definition) => {\n  const wrapper = new THREE.Group();\n  const base = createComponent(definition);\n  wrapper.add(base);\n  wrapper.position.set(...definition.start);\n  wrapper.rotation.set(...definition.rotation);\n  wrapper.visible = false;\n  wrapper.userData.definition = definition;\n  wrapper.userData.progress = 0;\n  wrapper.userData.start = new THREE.Vector3(...definition.start);\n  wrapper.userData.target = new THREE.Vector3(...definition.target);\n  wrapper.userData.step = definition.step;\n  root.add(wrapper);\n  return wrapper;\n});\n\nconst easing = (t) => 1 - Math.pow(1 - t, 3);\n\nlet animationFrameId = 0;\nfunction updateComponents() {\n  components.forEach((component) => {\n    const shouldBeVisible = stepIndex >= component.userData.step;\n    if (!shouldBeVisible) {\n      component.visible = false;\n      component.userData.progress = 0;\n      component.position.copy(component.userData.start);\n      return;\n    }\n\n    component.visible = true;\n    if (component.userData.progress < 1) {\n      component.userData.progress = Math.min(1, component.userData.progress + 0.04);\n      const eased = easing(component.userData.progress);\n      component.position.lerpVectors(component.userData.start, component.userData.target, eased);\n\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat || !mat.userData || !mat.userData.highlight) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          const highlight = new THREE.Color(mat.userData.highlight || component.userData.definition.highlight || component.userData.definition.color);\n          const lerped = baseColor.clone().lerp(highlight, Math.sin(component.userData.progress * Math.PI));\n          mat.color.copy(lerped);\n        });\n      }\n    } else {\n      component.position.copy(component.userData.target);\n      const baseObj = component.children[0];\n      if (baseObj) {\n        const mats = Array.isArray(baseObj.material) ? baseObj.material : [baseObj.material];\n        mats.forEach((mat) => {\n          if (!mat) return;\n          const baseColor = new THREE.Color(component.userData.definition.color);\n          mat.color.copy(baseColor);\n        });\n      }\n    }\n  });\n}\n\nfunction updateCamera() {\n  const radius = orbitState.radius;\n  const x = focusPoint.x + radius * Math.cos(pointerState.targetX) * Math.cos(pointerState.targetY);\n  const y = focusPoint.y + radius * Math.sin(pointerState.targetX);\n  const z = focusPoint.z + radius * Math.cos(pointerState.targetX) * Math.sin(pointerState.targetY);\n  camera.position.set(x, y, z);\n  camera.lookAt(focusPoint);\n}\n\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  updateCamera();\n  updateComponents();\n  renderer.render(scene, camera);\n}\n\nanimate();\n\nwindow.SYI = {\n  cleanup() {\n    cancelAnimationFrame(animationFrameId);\n    container.removeEventListener('pointerdown', onPointerDown);\n    container.removeEventListener('pointermove', onPointerMove);\n    window.removeEventListener('pointerup', onPointerUp);\n    container.removeEventListener('wheel', onWheel);\n    if (renderer) {\n      renderer.dispose();\n      if (renderer.domElement && renderer.domElement.parentElement === container) {\n        container.removeChild(renderer.domElement);\n      }\n    }\n  },\n};"
    }
  ]
}